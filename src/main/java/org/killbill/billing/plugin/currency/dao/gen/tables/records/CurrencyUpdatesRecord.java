/*
 * This file is generated by jOOQ.
 */
package org.killbill.billing.plugin.currency.dao.gen.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.currency.dao.gen.tables.CurrencyUpdates;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyUpdatesRecord extends UpdatableRecordImpl<CurrencyUpdatesRecord> implements Record6<ULong, String, LocalDateTime, LocalDateTime, LocalDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>killbill.currency_updates.record_id</code>.
     */
    public void setRecordId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.record_id</code>.
     */
    public ULong getRecordId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>killbill.currency_updates.base_currency</code>.
     */
    public void setBaseCurrency(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.base_currency</code>.
     */
    public String getBaseCurrency() {
        return (String) get(1);
    }

    /**
     * Setter for <code>killbill.currency_updates.conversion_date</code>.
     */
    public void setConversionDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.conversion_date</code>.
     */
    public LocalDateTime getConversionDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>killbill.currency_updates.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>killbill.currency_updates.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>killbill.currency_updates.kb_tenant_id</code>.
     */
    public void setKbTenantId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>killbill.currency_updates.kb_tenant_id</code>.
     */
    public String getKbTenantId() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, LocalDateTime, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<ULong, String, LocalDateTime, LocalDateTime, LocalDateTime, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CurrencyUpdates.CURRENCY_UPDATES.RECORD_ID;
    }

    @Override
    public Field<String> field2() {
        return CurrencyUpdates.CURRENCY_UPDATES.BASE_CURRENCY;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return CurrencyUpdates.CURRENCY_UPDATES.CONVERSION_DATE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return CurrencyUpdates.CURRENCY_UPDATES.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return CurrencyUpdates.CURRENCY_UPDATES.UPDATED_AT;
    }

    @Override
    public Field<String> field6() {
        return CurrencyUpdates.CURRENCY_UPDATES.KB_TENANT_ID;
    }

    @Override
    public ULong component1() {
        return getRecordId();
    }

    @Override
    public String component2() {
        return getBaseCurrency();
    }

    @Override
    public LocalDateTime component3() {
        return getConversionDate();
    }

    @Override
    public LocalDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdatedAt();
    }

    @Override
    public String component6() {
        return getKbTenantId();
    }

    @Override
    public ULong value1() {
        return getRecordId();
    }

    @Override
    public String value2() {
        return getBaseCurrency();
    }

    @Override
    public LocalDateTime value3() {
        return getConversionDate();
    }

    @Override
    public LocalDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdatedAt();
    }

    @Override
    public String value6() {
        return getKbTenantId();
    }

    @Override
    public CurrencyUpdatesRecord value1(ULong value) {
        setRecordId(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord value2(String value) {
        setBaseCurrency(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord value3(LocalDateTime value) {
        setConversionDate(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord value4(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord value5(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord value6(String value) {
        setKbTenantId(value);
        return this;
    }

    @Override
    public CurrencyUpdatesRecord values(ULong value1, String value2, LocalDateTime value3, LocalDateTime value4, LocalDateTime value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CurrencyUpdatesRecord
     */
    public CurrencyUpdatesRecord() {
        super(CurrencyUpdates.CURRENCY_UPDATES);
    }

    /**
     * Create a detached, initialised CurrencyUpdatesRecord
     */
    public CurrencyUpdatesRecord(ULong recordId, String baseCurrency, LocalDateTime conversionDate, LocalDateTime createdAt, LocalDateTime updatedAt, String kbTenantId) {
        super(CurrencyUpdates.CURRENCY_UPDATES);

        setRecordId(recordId);
        setBaseCurrency(baseCurrency);
        setConversionDate(conversionDate);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setKbTenantId(kbTenantId);
    }
}
