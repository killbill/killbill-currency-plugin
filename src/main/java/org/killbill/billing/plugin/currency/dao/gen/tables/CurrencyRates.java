/*
 * This file is generated by jOOQ.
 */
package org.killbill.billing.plugin.currency.dao.gen.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.currency.dao.gen.Indexes;
import org.killbill.billing.plugin.currency.dao.gen.Keys;
import org.killbill.billing.plugin.currency.dao.gen.Killbill;
import org.killbill.billing.plugin.currency.dao.gen.tables.records.CurrencyRatesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyRates extends TableImpl<CurrencyRatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>killbill.currency_rates</code>
     */
    public static final CurrencyRates CURRENCY_RATES = new CurrencyRates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyRatesRecord> getRecordType() {
        return CurrencyRatesRecord.class;
    }

    /**
     * The column <code>killbill.currency_rates.record_id</code>.
     */
    public final TableField<CurrencyRatesRecord, ULong> RECORD_ID = createField(DSL.name("record_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>killbill.currency_rates.target_currency</code>.
     */
    public final TableField<CurrencyRatesRecord, String> TARGET_CURRENCY = createField(DSL.name("target_currency"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>killbill.currency_rates.rate</code>.
     */
    public final TableField<CurrencyRatesRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.DECIMAL(15, 9).nullable(false), this, "");

    /**
     * The column
     * <code>killbill.currency_rates.currency_update_record_id</code>.
     */
    public final TableField<CurrencyRatesRecord, Integer> CURRENCY_UPDATE_RECORD_ID = createField(DSL.name("currency_update_record_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>killbill.currency_rates.created_at</code>.
     */
    public final TableField<CurrencyRatesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>killbill.currency_rates.updated_at</code>.
     */
    public final TableField<CurrencyRatesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>killbill.currency_rates.kb_tenant_id</code>.
     */
    public final TableField<CurrencyRatesRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), SQLDataType.CHAR(36).nullable(false), this, "");

    private CurrencyRates(Name alias, Table<CurrencyRatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrencyRates(Name alias, Table<CurrencyRatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>killbill.currency_rates</code> table reference
     */
    public CurrencyRates(String alias) {
        this(DSL.name(alias), CURRENCY_RATES);
    }

    /**
     * Create an aliased <code>killbill.currency_rates</code> table reference
     */
    public CurrencyRates(Name alias) {
        this(alias, CURRENCY_RATES);
    }

    /**
     * Create a <code>killbill.currency_rates</code> table reference
     */
    public CurrencyRates() {
        this(DSL.name("currency_rates"), null);
    }

    public <O extends Record> CurrencyRates(Table<O> child, ForeignKey<O, CurrencyRatesRecord> key) {
        super(child, key, CURRENCY_RATES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Killbill.KILLBILL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CURRENCY_RATES_CURRENCY_RATES_CURRENCY_UPDATE_RECORD_ID);
    }

    @Override
    public Identity<CurrencyRatesRecord, ULong> getIdentity() {
        return (Identity<CurrencyRatesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrencyRatesRecord> getPrimaryKey() {
        return Keys.KEY_CURRENCY_RATES_PRIMARY;
    }

    @Override
    public List<UniqueKey<CurrencyRatesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CURRENCY_RATES_RECORD_ID);
    }

    @Override
    public CurrencyRates as(String alias) {
        return new CurrencyRates(DSL.name(alias), this);
    }

    @Override
    public CurrencyRates as(Name alias) {
        return new CurrencyRates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrencyRates rename(String name) {
        return new CurrencyRates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrencyRates rename(Name name) {
        return new CurrencyRates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, BigDecimal, Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
